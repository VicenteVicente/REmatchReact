{"version":3,"sources":["components/Editor/index.jsx","App.js","components/DynamicResults/index.jsx","serviceWorker.js","index.js"],"names":["MARKCOLORS","CodeMirror","defineSimpleMode","start","regex","token","worker","Editor","this","editor","document","getElementById","props","label","mode","theme","lineNumbers","scrollbarStyle","smartIndent","indentWithTabs","showInvisibles","undoDepth","viewportMargin","setValue","value","disableNewLine","on","instance","change","line","text","join","replace","update","from","to","id","Component","TextEditor","prevProps","marks","length","forEach","m","idx","markText","posFromIndex","s","e","className","QueryEditor","Result","spans","mapping","map","span","key","onClick","test","DynamicResults","list","style","backgroundColor","WORKPATH","process","App","useState","setMarks","spanList","setSpanList","queryEditorRef","useRef","textEditorRef","addMatches","results","result","current","getRange","useEffect","initWorker","Worker","onmessage","data","type","currResults","console","log","terminate","alert","error","postMessage","getValue","query","ref","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.37aeaea9.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport CodeMirror from 'codemirror';\r\nimport 'codemirror/addon/mode/simple';\r\n\r\n\r\nconst MARKCOLORS = [\r\n    \"m0\",\r\n    \"m1\",\r\n    \"m2\",\r\n    \"m3\", \r\n    \"m4\",\r\n];\r\n\r\n/* MODE DEFINITION */\r\nCodeMirror.defineSimpleMode(\"rematchQuery\", {\r\n    start: [\r\n        { regex: /(\\.\\+|\\.\\*|\\.|\\+)/, token: \"keyword\" },\r\n        { regex: /(\\\\d)|(\\\\w)|(\\\\s)|(\\\\t)|(\\\\r)|(\\\\n)|(\\\\\\()|(\\\\\\))|(\\\\\\[)|(\\\\\\])|(\\\\\\{)|(\\\\\\})|(\\\\\\.)|(\\\\-)|(\\\\_)/i, token: \"string\" },\r\n        { regex: /(![A-Za-z0-9]+\\{|\\})/, token: \"number\" },\r\n        { regex: /(\\(|\\)|\\||\\[|\\]|-)/, token: \"operator\" }\r\n    ]\r\n});\r\n\r\n/* GENERAL EDITOR CONFIGURATION */\r\nclass Editor extends Component {\r\n    componentDidMount() {\r\n        this.editor = CodeMirror(document.getElementById(this.props.label), {\r\n            mode: this.props.mode,\r\n            theme: this.props.theme,\r\n            lineNumbers: this.props.lineNumbers,\r\n            scrollbarStyle: this.props.scrollbarStyle,\r\n            smartIndent: false,\r\n            indentWithTabs: true,\r\n            showInvisibles: false,\r\n            undoDepth: 100,\r\n            viewportMargin: 10, // Lines rendered up and down [MEMORY]\r\n        });\r\n        this.editor.setValue(this.props.value);\r\n\r\n        if (this.props.disableNewLine) {\r\n            this.editor.on('beforeChange', function(instance, change) {\r\n                var line = change.text.join(\"\").replace(/\\n/g, \"\");\r\n                change.update(change.from, change.to, [line]);\r\n                return true;\r\n            });\r\n        }\r\n    }\r\n    render() {\r\n        return <div id={this.props.label}></div>;\r\n    }\r\n}\r\n\r\n/* TEXT EDITOR */\r\nexport class TextEditor extends Editor {\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.marks.length !== 0) {\r\n            this.props.marks.forEach((m, idx) => {\r\n                this.editor.markText(\r\n                    this.editor.posFromIndex(m.s),\r\n                    this.editor.posFromIndex(m.e),\r\n                    { className: MARKCOLORS[idx]},\r\n                )\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n/* QUERY EDITOR */\r\nexport class QueryEditor extends Editor {\r\n}\r\n\r\n//export default Editor;","import React, {useEffect, useState, useRef} from 'react';\nimport {TextEditor, QueryEditor} from './components/Editor';\nimport DynamicResults from './components/DynamicResults';\n\n\nconst WORKPATH = `${process.env.PUBLIC_URL}/work.js`;\nlet worker;\n\nconst App = () => {\n  const [marks, setMarks] = useState([]);\n  const [spanList, setSpanList] = useState([]);\n  const queryEditorRef = useRef();\n  const textEditorRef = useRef();\n\n  /* MARKS */\n  /*\n  const markUpdate = () => {\n    setMarks([\n      { s: 1, e: 9 }\n    ]);\n  }\n  */\n  /* WASM */\n  const addMatches = (results) => {\n    results.forEach((result) => {\n      result.forEach((span) => {\n        span.m = textEditorRef.current.editor.getRange(\n          textEditorRef.current.editor.posFromIndex(span.s),\n          textEditorRef.current.editor.posFromIndex(span.e)\n        );\n      })\n    })\n  }\n  const initWorker = () => {\n    worker = new Worker(WORKPATH);\n    worker.onmessage = (m) => {\n      if (m.data.type === \"SCHEMA\") {\n      } else\n      if (m.data.type === \"RESULT\") {\n        addMatches(m.data.spans);\n        setSpanList((currResults) => [...currResults, ...m.data.spans]);\n      } else \n      if (m.data.type === \"LASTRESULT\") {\n        addMatches(m.data.spans);\n        setSpanList((currResults) => [...currResults, ...m.data.spans]);\n\n        console.log(\"FINISHED\");\n        worker.terminate();\n        initWorker();\n      } else \n      if (m.data.type === \"ERROR\") {\n        alert(m.data.error);\n        worker.terminate();\n        initWorker();\n      } else \n      if (m.data.type === \"NORESULTS\") {\n        console.log(\"No matches found.\");\n        worker.terminate();\n        initWorker();\n      }\n    }\n  }\n  const runWorker = () => {\n    setSpanList([]);\n    worker.postMessage({\n      text:   textEditorRef.current.editor.getValue(),\n      query:  queryEditorRef.current.editor.getValue(),\n    });\n  }\n  // RUN THIS ONCE\n  useEffect(() => {\n    initWorker();\n  }, []);\n\n  return (\n    <div>\n      <button onClick={runWorker}>Run Query</button>\n      <h1 onClick={() => console.log}>REmatch test!</h1>\n      <QueryEditor\n        ref={queryEditorRef}\n        label=\"queryEditor\"\n        mode=\"rematchQuery\"\n        scrollbarStyle=\"null\"\n        value=\"!a{RE}!b{match} !c{is} !d{[a-z]+}!e{!}\" \n        theme=\"monokai\"\n        lineNumbers={false}\n        disableNewLine={true}\n      />\n      <TextEditor\n        ref={textEditorRef}\n        label=\"textEditor\"\n        mode=\"text/plain\"\n        scrollbarStyle=\"native\"\n        value={\n`REmatch is cool!\nREmatch is awesome!\nREmatch is pretty!\nREmatch is useful!\nREmatch is cool!\nREmatch is awesome!\nREmatch is pretty!\nREmatch is useful!\nREmatch is cool!\nREmatch is awesome!\nREmatch is pretty!\nREmatch is useful!`}\n        theme=\"monokai\"\n        lineNumbers={true}\n        disableNewLine={false}\n        marks={marks}\n      />\n      <DynamicResults test={setMarks} list={spanList}/>\n    </div>\n  )\n}\n\nexport default App;\n","import React, {Component} from 'react';\r\n\r\nconst Result = (props) => {\r\n    const spans = props.spans;\r\n    const mapping = props.spans.map( (span, idx) => (\r\n        <span key={idx}>{span.m}</span>\r\n    ));\r\n    return (\r\n        <button onClick={() => props.test(props.spans)}>{mapping}</button>\r\n    )\r\n}\r\n\r\nclass DynamicResults extends Component {    \r\n    render() {\r\n        const test = this.props.list.map( (spans, idx) => (\r\n            <Result key={idx} spans={spans} test={this.props.test}/>\r\n        ))\r\n        return (\r\n            <div style={{backgroundColor: 'gray'}}>\r\n                {test}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DynamicResults;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}