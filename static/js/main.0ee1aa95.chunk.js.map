{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["WORKPATH","process","CHUNKSIZE","worker","Worker","marks","CodeMirror","defineSimpleMode","start","regex","token","darkTheme","createMuiTheme","palette","type","ResultsTable","props","handleChangePage","_","newPage","setState","page","handleChangeRowsPerPage","event","rowsPerPage","target","value","handleMarkText","row","clearMarks","addMarks","state","this","schema","spanList","textEditor","TableContainer","component","Paper","style","marginTop","Table","size","TableHead","TableRow","TablePagination","labelRowsPerPage","rowsPerPageOptions","colSpan","length","count","onChangePage","onChangeRowsPerPage","map","name","idxHead","TableCell","key","TableBody","slice","idxRow","hover","cursor","onClick","col","idxCol","getRange","posFromIndex","s","e","Component","App","spans","forEach","span","idx","push","markText","className","mark","clear","handleFile","a","file","files","setValue","end","text","then","textChunk","replaceRange","line","Infinity","console","log","runWorker","postMessage","getValue","query","queryEditor","onmessage","m","data","prevState","error","document","getElementById","mode","theme","lineNumbers","scrollbarStyle","smartIndent","indentWithTabs","showInvisibles","undoDepth","viewportMargin","on","instance","change","join","replace","update","from","to","ThemeProvider","Button","variant","startIcon","PlayArrow","accept","id","display","onChange","htmlFor","Publish","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0ee1aa95.chunk.js","sourcesContent":["import CodeMirror from 'codemirror';\nimport 'codemirror/theme/material.css';\nimport 'codemirror/addon/mode/simple';\n\nimport React, {Component, useState} from 'react';\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { Button } from '@material-ui/core';\nimport { PlayArrow, Publish, Visibility } from '@material-ui/icons';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport Paper from '@material-ui/core/Paper';\n\nconst WORKPATH = `${process.env.PUBLIC_URL}/work.js`;\nconst CHUNKSIZE = 1*10**8; // 100MB\nlet worker = new Worker(WORKPATH);\nlet marks = [];\n\n/* CODEMIRROR MODE DEFINITION */\nCodeMirror.defineSimpleMode(\"rematchQuery\", {\n  start: [\n      { regex: /(\\.\\+|\\.\\*|\\.|\\+)/, token: \"keyword\" },\n      { regex: /(\\\\d)|(\\\\w)|(\\\\s)|(\\\\t)|(\\\\r)|(\\\\n)|(\\\\\\()|(\\\\\\))|(\\\\\\[)|(\\\\\\])|(\\\\\\{)|(\\\\\\})|(\\\\\\.)|(\\\\-)|(\\\\_)/i, token: \"string\" },\n      { regex: /(![A-Za-z0-9]+\\{|\\})/, token: \"number\" },\n      { regex: /(\\(|\\)|\\||\\[|\\]|-)/, token: \"operator\" }\n  ]\n});\n/* MATERIAL UI DARK THEME */\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nclass ResultsTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      page: 0,\n      rowsPerPage: 25,\n    }\n  }\n\n  handleChangePage = (_, newPage) => {\n    this.setState({page: newPage});\n  }\n\n  handleChangeRowsPerPage = (event) => {\n    this.setState({\n      rowsPerPage: event.target.value,\n      page: 0\n    });\n  }\n\n  handleMarkText = (row) => {\n    this.props.clearMarks();\n    this.props.addMarks(row);\n  }\n\n  componentWillReceiveProps(_) {\n    this.setState({page: 0});\n  }\n\n  render() {\n    const {schema, spanList, textEditor} = this.props;\n    return (\n      <TableContainer component={Paper} style={{marginTop: '1rem'}}>\n        <Table size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TablePagination\n                labelRowsPerPage=\"Matches per page:\"\n                rowsPerPageOptions={[10, 25, 50, 100]}\n                colSpan={schema.length}\n                count={spanList.length}\n                rowsPerPage={this.state.rowsPerPage}\n                page={this.state.page}\n                onChangePage={this.handleChangePage}\n                onChangeRowsPerPage={this.handleChangeRowsPerPage}\n              />\n            </TableRow>\n            {(spanList.length>0)\n            ? <TableRow>\n                {schema.map((name, idxHead) => (\n                  <TableCell key={idxHead}>{name}</TableCell>\n                  ))}\n              </TableRow>\n            : <TableRow>\n                <TableCell>\n                  No matches.\n                </TableCell>\n              </TableRow>\n            }\n          </TableHead>\n          <TableBody>\n            {(this.state.rowsPerPage > 0\n              ? spanList.slice(\n                this.state.page * this.state.rowsPerPage,\n                this.state.page * this.state.rowsPerPage + this.state.rowsPerPage)\n              : spanList).map((row, idxRow) => ( \n              <TableRow key={idxRow} hover style={{cursor: 'pointer'}} onClick={() => this.handleMarkText(row)}>\n                {row.map((col, idxCol) => (\n                  <TableCell key={idxCol}>{\n                    textEditor.getRange(\n                      textEditor.posFromIndex(col.s),\n                      textEditor.posFromIndex(col.e))}\n                  </TableCell>\n                ))}\n              </TableRow>\n              ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    )\n  }\n}\n\n/* APP */\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      schema: [],\n      spanList: [],\n    };\n  }\n  componentDidMount() {\n    let queryEditor = CodeMirror(document.getElementById('queryEditor'), {\n      value: '!a{This} !b{is} !c{RE}!d{match}, !e{.+}!',\n      mode: 'rematchQuery',\n      theme: 'material',\n      lineNumbers: false,\n      scrollbarStyle: 'native',\n      smartIndent: false,\n      indentWithTabs: true,\n      showInvisibles: false,\n      undoDepth: 100,\n      viewportMargin: 10,\n    });\n    queryEditor.on('beforeChange', (instance, change) => {\n      let line = change.text.join(\"\").replace(/\\n/g, \"\");\n      change.update(change.from, change.to, [line]);\n      return true;\n    });\n    let textEditor = CodeMirror(document.getElementById('textEditor'), {\n      value: \n`This is REmatch, cool!\nThis is REmatch, awesome!\nThis is REmatch, useful!\nThis is REmatch, incredible!\nThis is REmatch, fast!\n`,\n      mode: 'text/plain',\n      theme: 'material',\n      lineNumbers: true,\n      scrollbarStyle: 'native',\n      smartIndent: false,\n      indentWithTabs: true,\n      showInvisibles: true,\n      undoDepth: 100,\n      viewportMargin: 10,\n    });\n    this.setState({\n      queryEditor, \n      textEditor,\n    });\n  }\n  addMarks = (spans) => {\n    spans.forEach((span, idx) => {\n      marks.push(\n        this.state.textEditor.markText(\n          this.state.textEditor.posFromIndex(span.s),\n          this.state.textEditor.posFromIndex(span.e),\n          {className: `m${idx}`})\n      );\n    });\n  }\n  clearMarks = () => {\n    marks.forEach((mark) => {\n      mark.clear();\n    });\n    marks = [];\n  }\n  handleFile = async (event) => {\n    let file = event.target.files[0];\n    if (!file) {return};\n    this.state.textEditor.setValue('');\n    this.clearMarks();\n    this.setState({spanList: [], schema: []});\n    let start = 0;\n    let end = CHUNKSIZE;\n    while (start < file.size) {\n        await file.slice(start, end).text()\n          // eslint-disable-next-line no-loop-func\n          .then((textChunk) => {\n            this.state.textEditor.replaceRange(textChunk, { line: Infinity });\n            start = end;\n            end += CHUNKSIZE;\n          });\n    }\n    console.log('upload done');\n  }\n  runWorker = () => {\n    console.log('STARTED');\n    this.clearMarks();\n    this.setState({spanList: [], schema: []});\n    worker.postMessage({\n      text:   this.state.textEditor.getValue(),\n      query:  this.state.queryEditor.getValue(),\n    });\n    worker.onmessage = (m) => {\n      switch(m.data.type) {\n        case 'SCHEMA':\n          this.setState({schema: m.data.schema});\n          break;\n        case 'SPANS':\n          this.setState((prevState, _) => ({spanList: [...prevState.spanList, ...m.data.spans]}));\n          break;\n        case 'LAST_SPANS':\n          this.setState((prevState, _) => ({spanList: [...prevState.spanList, ...m.data.spans]}));\n          console.log(\"FINISHED (NO MORE SPANS)\");\n          break;\n        case 'ERROR':\n          console.log(\"FINISHED (ERROR)\");\n          console.log(m.data.error);\n          break;\n        case 'NO_MATCHES':\n          console.log(\"FINISHED (NO MATCHES)\");\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  render() {\n    //let test = this.state.spanList.map( (elem, idx) => <div key={idx}>{JSON.stringify(elem)}</div>);\n    return (\n      <ThemeProvider theme={darkTheme}>\n        <Button variant=\"outlined\" startIcon={<PlayArrow/>} onClick={this.runWorker} >\n            Run Query\n        </Button>\n        <input accept=\"text/*\" id=\"fileInput\" type=\"file\" style={{display: 'none'}} onChange={this.handleFile}/>\n        <label htmlFor=\"fileInput\">\n          <Button variant=\"outlined\" component=\"span\" startIcon={<Publish/>}>\n            Upload file\n          </Button>\n        </label>\n        <div id=\"queryEditor\"></div>\n        <div id=\"textEditor\"></div>\n        <ResultsTable \n          spanList={this.state.spanList} \n          schema={this.state.schema} \n          textEditor={this.state.textEditor} \n          addMarks={this.addMarks}\n          clearMarks={this.clearMarks}\n        />\n        <div id=\"test\"></div>\n      </ThemeProvider>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}