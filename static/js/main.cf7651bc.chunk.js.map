{"version":3,"sources":["components/editor/index.jsx","App.js","serviceWorker.js","index.js"],"names":["CodeMirror","defineSimpleMode","start","regex","token","Editor","this","editor","document","getElementById","props","label","mode","theme","lineNumbers","smartIndent","indentWithTabs","showInvisibles","undoDepth","viewportMargin","setValue","value","disableNewLine","on","instance","change","line","text","join","replace","update","from","to","id","Component","TextEditor","prevProps","markTest","marks","markStart","posFromIndex","s","markEnd","e","markText","className","QueryEditor","App","React","useState","setMarks","onClick","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oOAKAA,IAAWC,iBAAiB,eAAgB,CACxCC,MAAO,CACH,CAAEC,MAAO,oBAAqBC,MAAO,WACrC,CAAED,MAAO,oGAAqGC,MAAO,UACrH,CAAED,MAAO,uBAAwBC,MAAO,UACxC,CAAED,MAAO,qBAAsBC,MAAO,e,IAKxCC,E,kLAEEC,KAAKC,OAASP,IAAWQ,SAASC,eAAeH,KAAKI,MAAMC,OAAQ,CAChEC,KAAMN,KAAKI,MAAME,KACjBC,MAAOP,KAAKI,MAAMG,MAClBC,YAAaR,KAAKI,MAAMI,YACxBC,aAAa,EACbC,gBAAgB,EAChBC,gBAAgB,EAChBC,UAAW,IACXC,eAAgB,KAEpBb,KAAKC,OAAOa,SAASd,KAAKI,MAAMW,OAE5Bf,KAAKI,MAAMY,gBACXhB,KAAKC,OAAOgB,GAAG,gBAAgB,SAASC,EAAUC,GAC9C,IAAIC,EAAOD,EAAOE,KAAKC,KAAK,IAAIC,QAAQ,MAAO,IAE/C,OADAJ,EAAOK,OAAOL,EAAOM,KAAMN,EAAOO,GAAI,CAACN,KAChC,O,+BAKf,OAAO,yBAAKO,GAAI3B,KAAKI,MAAMC,Y,GAvBduB,aA4BRC,EAAb,iLACuBC,GACf,IAAIC,EAAW/B,KAAKI,MAAM4B,MAAM,GAC5BC,EAAYjC,KAAKC,OAAOiC,aAAaH,EAASI,GAC9CC,EAAUpC,KAAKC,OAAOiC,aAAaH,EAASM,GAChDrC,KAAKC,OAAOqC,SACRL,EACAG,EACA,CACIG,UAAW,eAT3B,GAAgCxC,GAgBnByC,EAAb,4HAAiCzC,GCvBlB0C,EAjCH,WAAO,IAAD,EACUC,IAAMC,SAAS,MADzB,mBACTX,EADS,KACFY,EADE,KAOhB,OACE,6BACE,4BAAQC,QAAS,cAAjB,aACA,wBAAIA,QAAS,kBAAMC,QAAQC,MAA3B,iBACA,kBAAC,EAAD,CACE1C,MAAM,cACNC,KAAK,eACLS,MAAM,YACNR,MAAM,UACNC,aAAa,EACbQ,gBAAgB,IAElB,kBAAC,EAAD,CACEX,MAAM,aACNC,KAAK,aACLS,MAAM,yBACNR,MAAM,UACNC,aAAa,EACbQ,gBAAgB,EAChBgB,MAAOA,IAET,4BAAQa,QA1BO,WACjBD,EAAS,CACP,CAAET,EAAG,EAAGE,EAAG,OAwBX,kBCnBcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrD,SAASC,eAAe,SDyHpB,kBAAmBqD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjB,QAAQiB,MAAMA,EAAMC,a","file":"static/js/main.cf7651bc.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport CodeMirror from 'codemirror';\r\nimport 'codemirror/addon/mode/simple';\r\n\r\n/* MODE DEFINITION */\r\nCodeMirror.defineSimpleMode(\"rematchQuery\", {\r\n    start: [\r\n        { regex: /(\\.\\+|\\.\\*|\\.|\\+)/, token: \"keyword\" },\r\n        { regex: /(\\\\d)|(\\\\w)|(\\\\s)|(\\\\t)|(\\\\r)|(\\\\n)|(\\\\\\()|(\\\\\\))|(\\\\\\[)|(\\\\\\])|(\\\\\\{)|(\\\\\\})|(\\\\\\.)|(\\\\-)|(\\\\_)/i, token: \"string\" },\r\n        { regex: /(![A-Za-z0-9]+\\{|\\})/, token: \"number\" },\r\n        { regex: /(\\(|\\)|\\||\\[|\\]|-)/, token: \"operator\" }\r\n    ]\r\n});\r\n\r\n/* GENERAL EDITOR CONFIGURATION */\r\nclass Editor extends Component {\r\n    componentDidMount() {\r\n        this.editor = CodeMirror(document.getElementById(this.props.label), {\r\n            mode: this.props.mode,\r\n            theme: this.props.theme,\r\n            lineNumbers: this.props.lineNumbers,\r\n            smartIndent: false,\r\n            indentWithTabs: true,\r\n            showInvisibles: false,\r\n            undoDepth: 100,\r\n            viewportMargin: 10, // Lines rendered up and down [MEMORY]\r\n        });\r\n        this.editor.setValue(this.props.value);\r\n\r\n        if (this.props.disableNewLine) {\r\n            this.editor.on('beforeChange', function(instance, change) {\r\n                var line = change.text.join(\"\").replace(/\\n/g, \"\");\r\n                change.update(change.from, change.to, [line]);\r\n                return true;\r\n            });\r\n        }\r\n    }\r\n    render() {\r\n        return <div id={this.props.label}></div>;\r\n    }\r\n}\r\n\r\n/* TEXT EDITOR */\r\nexport class TextEditor extends Editor {\r\n    componentDidUpdate(prevProps) {\r\n        let markTest = this.props.marks[0];\r\n        let markStart = this.editor.posFromIndex(markTest.s);\r\n        let markEnd = this.editor.posFromIndex(markTest.e);\r\n        this.editor.markText(\r\n            markStart,\r\n            markEnd,\r\n            {\r\n                className: 'marker',\r\n            },\r\n        )\r\n    }\r\n}\r\n\r\n/* QUERY EDITOR */\r\nexport class QueryEditor extends Editor {\r\n}\r\n\r\n//export default Editor;","import React from 'react';\nimport {TextEditor, QueryEditor} from './components/editor'\n\nconst App = () => {\n  const [marks, setMarks] = React.useState(null);\n  const markUpdate = () => {\n    setMarks([\n      { s: 1, e: 9 }\n    ]);\n  }\n  return (\n    <div>\n      <button onClick={() => {}}>Run Query</button>\n      <h1 onClick={() => console.log}>REmatch test!</h1>\n      <QueryEditor\n        label=\"queryEditor\"\n        mode=\"rematchQuery\"\n        value=\"!x{query}\" \n        theme=\"monokai\"\n        lineNumbers={false}\n        disableNewLine={true}\n      />\n      <TextEditor \n        label=\"textEditor\"\n        mode=\"text/plain\"\n        value=\"REmatch React is cool!\" \n        theme=\"monokai\"\n        lineNumbers={true}\n        disableNewLine={false}\n        marks={marks}\n      />\n      <button onClick={markUpdate}>Switch mark!</button>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}